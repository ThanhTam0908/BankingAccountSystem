/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package BankingAccountSystem.Manipulate;

/**
 *
 * @author HATTORI BAMBI
 */
import BankingAccountSystem.Class.Staff_salary;
import BankingAccountSystem.LoginandPage.Staff_page;
import BankingAccountSystem.Tool_Group.ConnectionClass;
import java.util.ArrayList;
import javax.swing.table.*;
import javax.swing.*;
import java.sql.*;
public class Manipulate_Staff_salary extends javax.swing.JFrame {

    /**
     * Creates new form Manipulate_Staff_salary
     */
    DefaultTableModel model;
    private static boolean showTime = true;
    public Manipulate_Staff_salary() {
        initComponents();
    }
    public ArrayList<Staff_salary> SalaryArrayList(){
        ArrayList<Staff_salary> SalaryArrayList = new ArrayList<>();
        try
        {
            Connection connection = ConnectionClass.connection();
            String sql = "SELECT * FROM Staff_salary";
            Statement st = connection.createStatement();
            ResultSet rs = st.executeQuery(sql);
            Staff_salary c;
            while (rs.next()) {
                c = new Staff_salary(
                        rs.getString("Staff_ID"),
                        rs.getString("Staff_name"),
                        rs.getFloat("Salary"));
                SalaryArrayList.add(c);
            }
            connection.close();
        }
        catch (SQLException e) {
            JOptionPane.showMessageDialog(null,e);
        }
        return SalaryArrayList;
    }
    public void show_salary() {
        ArrayList<Staff_salary>  list = SalaryArrayList();
        model = (DefaultTableModel)TableShowSalary.getModel();
        Object[] row = new Object[3];
        for (Staff_salary object: list){
            row[0] = object.getStaff_ID();
            row[1] = object.getStaff_name();
            row[2] = object.getSalary();
            model.addRow(row);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        TStaff_ID = new javax.swing.JTextField();
        TStaff_name = new javax.swing.JTextField();
        TSalary = new javax.swing.JTextField();
        BShowSalary = new javax.swing.JButton();
        BRun = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        TableShowSalary = new javax.swing.JTable();
        jLabel4 = new javax.swing.JLabel();
        comboboxdo = new javax.swing.JComboBox<>();
        Bmenu = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("Staff_ID:");

        jLabel2.setText("Staff_name:");

        jLabel3.setText("Salary:");

        BShowSalary.setText("Show_Salary");
        BShowSalary.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BShowSalaryActionPerformed(evt);
            }
        });

        BRun.setText("Run");
        BRun.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BRunActionPerformed(evt);
            }
        });

        TableShowSalary.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Staff_ID", "Staff_name", "Salary"
            }
        ));
        TableShowSalary.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                TableShowSalaryMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(TableShowSalary);

        jLabel4.setText("Do:");

        comboboxdo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Add", "Update" }));

        Bmenu.setText("Menu");
        Bmenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BmenuActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(BShowSalary, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(BRun, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(jLabel4, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(TStaff_name, javax.swing.GroupLayout.DEFAULT_SIZE, 129, Short.MAX_VALUE)
                                    .addComponent(TStaff_ID)
                                    .addComponent(TSalary)
                                    .addComponent(comboboxdo, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(87, 87, 87)
                        .addComponent(Bmenu)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 32, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 375, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(TStaff_ID, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(TStaff_name, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(TSalary, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(comboboxdo, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(27, 27, 27)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(BShowSalary, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(BRun, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(Bmenu, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 321, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 25, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void BShowSalaryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BShowSalaryActionPerformed
        // TODO add your handling code here:
        if (showTime){
            show_salary();
            showTime = false;
        }
        else {
            model.setRowCount(0);
            show_salary();
        }
    }//GEN-LAST:event_BShowSalaryActionPerformed

    private void TableShowSalaryMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_TableShowSalaryMouseClicked
        // TODO add your handling code here:
        int i = TableShowSalary.getSelectedRow();
        TableModel model = TableShowSalary.getModel();
        TStaff_ID.setText(model.getValueAt(i, 0).toString());
        TStaff_name.setText(model.getValueAt(i, 1).toString());
        TSalary.setText(model.getValueAt(i,2).toString());
    }//GEN-LAST:event_TableShowSalaryMouseClicked

    private void BRunActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BRunActionPerformed
        // TODO add your handling code here:
        if (comboboxdo.getSelectedItem() == null) {
            JOptionPane.showMessageDialog(null, "You need to choose an action!",
                    "Warning!", JOptionPane.WARNING_MESSAGE);
            return;
        }
        String doing = comboboxdo.getSelectedItem().toString();
        if (doing.equals("Add")) {
            if (TStaff_ID.getText().length() == 0 || TStaff_name.getText().length() == 0 || TSalary.getText().length() == 0) {
                JOptionPane.showMessageDialog(null, "No field can be empty!",
                        "Message", JOptionPane.WARNING_MESSAGE);
            } else {
                try {
                    Connection connection = ConnectionClass.connection();
                        String insertQuery = "INSERT INTO Staff_salary VALUES (?,?,?)";
                        PreparedStatement preparedStatement = connection.prepareStatement(insertQuery);
                        preparedStatement.setString(1, TStaff_ID.getText());
                        preparedStatement.setString(2, TStaff_name.getText());
                        preparedStatement.setString(3, TSalary.getText());
                        preparedStatement.executeUpdate();
                        if (showTime){
                            show_salary();
                            showTime = false;
                        } else {
                            model.setRowCount(0);
                            show_salary();
                        }
                        JOptionPane.showMessageDialog(null, "Insert completed!");
                        connection.close();
                     
                } catch (SQLException e) {
                    JOptionPane.showMessageDialog(null, e);
                }
            
        }
        }
        else if (doing.equals("Update")) {
            if (TStaff_ID.getText().length() == 0 || TStaff_name.getText().length() == 0 || TSalary.getText().length() == 0) {
                JOptionPane.showMessageDialog(null, "No field can be empty!",
                        "Message", JOptionPane.WARNING_MESSAGE);
            } else {
                try {
                        Connection connection = ConnectionClass.connection();
                        String updateQuery = "UPDATE Staff_salary SET Staff_name=?, Salary=? WHERE Staff_ID=?";
                        PreparedStatement preparedStatement = connection.prepareStatement(updateQuery);
                        preparedStatement.setString(3, TStaff_ID.getText());
                        preparedStatement.setString(1, TStaff_name.getText());
                        preparedStatement.setString(2, TSalary.getText());
                        preparedStatement.executeUpdate();
                        if (showTime){
                            show_salary();
                            showTime = false;
                        } else {
                            model.setRowCount(0);
                            show_salary();
                        }
                        JOptionPane.showMessageDialog(null, "Update completed! Tip: ID cannot be changed.");
                        connection.close();
                     
                } catch (SQLException e) {
                    JOptionPane.showMessageDialog(null, e);
                }
            }
        }
        
    }//GEN-LAST:event_BRunActionPerformed

    private void BmenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BmenuActionPerformed
        // TODO add your handling code here:
        dispose();
        Staff_page.main(new String[] {});
    }//GEN-LAST:event_BmenuActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Manipulate_Staff_salary.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Manipulate_Staff_salary.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Manipulate_Staff_salary.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Manipulate_Staff_salary.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Manipulate_Staff_salary().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton BRun;
    private javax.swing.JButton BShowSalary;
    private javax.swing.JButton Bmenu;
    private javax.swing.JTextField TSalary;
    private javax.swing.JTextField TStaff_ID;
    private javax.swing.JTextField TStaff_name;
    private javax.swing.JTable TableShowSalary;
    private javax.swing.JComboBox<String> comboboxdo;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}
