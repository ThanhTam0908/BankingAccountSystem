/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package BankingAccountSystem.Manipulate;

/**
 *
 * @author HATTORI BAMBI
 */
import BankingAccountSystem.Class.Customer;
import BankingAccountSystem.Customer_Do.Withdrawal;
import BankingAccountSystem.LoginandPage.Customer_page;
import BankingAccountSystem.LoginandPage.Staff_page;
import BankingAccountSystem.Tool_Group.ConnectionClass;
import java.util.ArrayList;
import javax.swing.table.DefaultTableModel;
import java.sql.*;
import javax.swing.JOptionPane;
import javax.swing.table.TableModel;
public class Manipulate_Customer extends javax.swing.JFrame {
    public static boolean showTime = true;
    public static DefaultTableModel model;
    public static String role = null;
    public static String real_ID = null;

    public static String getRole() {
        return role;
    }

    public static void setRole(String role) {
        Manipulate_Customer.role = role;
    }

    public static String getReal_ID() {
        return real_ID;
    }

    public static void setReal_ID(String real_ID) {
        Manipulate_Customer.real_ID = real_ID;
    }
    /**
     * Creates new form Manipulate_Customer
     */
    
    public Manipulate_Customer() {
        initComponents();
        setResizable(true);
        setDefaultCloseOperation(EXIT_ON_CLOSE);
        setLocationRelativeTo(null);
    }
    public ArrayList<Customer> CustomerArrayList(){
        ArrayList<Customer> customerarraylist = new ArrayList<>();
        try
        {
        Connection connection = ConnectionClass.connection();
        String query = "SELECT * FROM Customer";
        Statement st = connection.createStatement();
        ResultSet rs = st.executeQuery(query);
        Customer c;
        while (rs.next()){
        c = new Customer(rs.getString("Customer_ID"),
            rs.getString("Customer_name"),
            rs.getString("Customer_gender"),
            rs.getString("Customer_phone"),
            rs.getString("Customer_address"),
            rs.getString("Card_ID"),
            rs.getDouble("Customer_money"));
        customerarraylist.add(c);
        } 
        connection.close();
        } catch (SQLException e){
            JOptionPane.showMessageDialog(null, e);
        }
        return customerarraylist;
    }
    public void show_customer(){
        ArrayList<Customer> list = CustomerArrayList();
        model = (DefaultTableModel)TableShowCustomer.getModel();
        Object[] row = new Object[7];
        for (Customer object: list){
            row[0] = object.getCustomer_ID();
            row[1] = object.getCustomer_name();
            row[2] = object.getCustomer_gender();
            row[3] = object.getCustomer_phone();
            row[4] = object.getCustomer_address();
            row[5] = object.getCard_ID();
            row[6] = object.getCustomer_money();
            model.addRow(row);
        }
    }
    public void show_only() {
        ArrayList<Customer> list = new ArrayList<>();
        try{
            Connection connection = ConnectionClass.connection();
            String query = "SELECT * FROM Customer WHERE Customer_ID=" + real_ID;
            PreparedStatement preparedStatement = connection.prepareStatement(query);
            ResultSet rs = preparedStatement.executeQuery();
            Customer c;
            while (rs.next()){
            c = new Customer( rs.getString(1),
                rs.getString(2),
                rs.getString(3),
                rs.getString(4),
                rs.getString(5),
                rs.getString(6),
                rs.getDouble(7));
                list.add(c);
            }
            connection.close();
            
            
        } catch (SQLException e){
            JOptionPane.showMessageDialog(null, e);
        }
        model = (DefaultTableModel)TableShowCustomer.getModel();
            Object[] row = new Object[7];
            for (Customer object: list){
                row[0] = object.getCustomer_ID();
            row[1] = object.getCustomer_name();
            row[2] = object.getCustomer_gender();
            row[3] = object.getCustomer_phone();
            row[4] = object.getCustomer_address();
            row[5] = object.getCard_ID();
            row[6] = object.getCustomer_money();
            model.addRow(row);
            }
        
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        BCustomer = new javax.swing.JButton();
        BRun = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        TID = new javax.swing.JTextField();
        TName = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        RMale = new javax.swing.JRadioButton();
        RFemale = new javax.swing.JRadioButton();
        jLabel4 = new javax.swing.JLabel();
        TPhone = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        TAddress = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        TMoney = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        TableShowCustomer = new javax.swing.JTable();
        jLabel7 = new javax.swing.JLabel();
        TCard_ID = new javax.swing.JTextField();
        BMenu = new javax.swing.JButton();
        jLabel8 = new javax.swing.JLabel();
        comboboxdo = new javax.swing.JComboBox<>();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        BCustomer.setText("Show_Customer");
        BCustomer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BCustomerActionPerformed(evt);
            }
        });

        BRun.setText("Run");
        BRun.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BRunActionPerformed(evt);
            }
        });

        jLabel1.setText("ID:");

        jLabel2.setText("Name:");

        jLabel3.setText("Gender");

        buttonGroup1.add(RMale);
        RMale.setText("Male");
        RMale.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RMaleActionPerformed(evt);
            }
        });

        buttonGroup1.add(RFemale);
        RFemale.setText("Female");

        jLabel4.setText("Phone:");

        jLabel5.setText("Address:");

        jLabel6.setText("Money:");

        TableShowCustomer.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Name", "Gender", "Phone", "Address", "Card_ID", "Money"
            }
        ));
        TableShowCustomer.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                TableShowCustomerMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(TableShowCustomer);

        jLabel7.setText("Card_ID:");

        BMenu.setText("Menu");
        BMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BMenuActionPerformed(evt);
            }
        });

        jLabel8.setText("Do:");

        comboboxdo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Add", "Delete", "Update" }));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(BCustomer)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(BMenu)
                        .addGap(24, 24, 24)
                        .addComponent(BRun, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addGroup(layout.createSequentialGroup()
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                            .addComponent(jLabel5, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 88, Short.MAX_VALUE)
                                            .addComponent(jLabel4, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                        .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGap(38, 38, 38))
                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                    .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(TID)
                            .addComponent(TName)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(RMale, javax.swing.GroupLayout.DEFAULT_SIZE, 64, Short.MAX_VALUE)
                                .addGap(18, 18, 18)
                                .addComponent(RFemale))
                            .addComponent(TPhone)
                            .addComponent(TAddress)
                            .addComponent(TMoney)
                            .addComponent(TCard_ID)
                            .addComponent(comboboxdo, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 575, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 280, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(TID)
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(TName, javax.swing.GroupLayout.DEFAULT_SIZE, 25, Short.MAX_VALUE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(RMale)
                            .addComponent(RFemale))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(TPhone, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(TAddress, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(TCard_ID, javax.swing.GroupLayout.DEFAULT_SIZE, 25, Short.MAX_VALUE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(TMoney, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(comboboxdo, javax.swing.GroupLayout.DEFAULT_SIZE, 25, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 25, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(BCustomer)
                            .addComponent(BRun)
                            .addComponent(BMenu)))))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void RMaleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RMaleActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_RMaleActionPerformed

    private void BCustomerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BCustomerActionPerformed
        // TODO add your handling code here:
        
       if (showTime)
       {    show_customer();
            showTime = false;}
        
        else {
            model.setRowCount(0);
            show_customer();
        }
    }//GEN-LAST:event_BCustomerActionPerformed

    private void TableShowCustomerMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_TableShowCustomerMouseClicked
        // TODO add your handling code here:
        int i = TableShowCustomer.getSelectedRow();
        TableModel model = TableShowCustomer.getModel();
        TID.setText(model.getValueAt(i, 0).toString());
        TName.setText(model.getValueAt(i, 1).toString());
        if (model.getValueAt(i, 2).toString().equals("Male"))
            {RMale.setSelected(true);}
        else if (model.getValueAt(i, 2).toString().equals("Female")) {
            RFemale.setSelected(true);}
        TPhone.setText(model.getValueAt(i,3).toString());
        TAddress.setText(model.getValueAt(i,4).toString());
        TCard_ID.setText(model.getValueAt(i,5).toString());
        TMoney.setText(model.getValueAt(i,6).toString());
    }//GEN-LAST:event_TableShowCustomerMouseClicked

    private void BMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BMenuActionPerformed
        // TODO add your handling code here:
        dispose();
        if (role.equals("0")){
            Customer_page.main(new String[]{});
            
        }
        else if (role.equals("1")){
            Staff_page.main(new String[]{});
        }
    }//GEN-LAST:event_BMenuActionPerformed

    private void BRunActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BRunActionPerformed
        // TODO add your handling code here:
        if (comboboxdo.getSelectedItem() == null) {
            JOptionPane.showMessageDialog(null, "You need to choose an action!",
                    "Warning!", JOptionPane.WARNING_MESSAGE);
            return;
        } else {
        String combobox = comboboxdo.getSelectedItem().toString();
        if (combobox == "Add"){ 
            if (TID.getText().length()==0 || TName.getText().length()==0 || TPhone.getText().length()==0 || TAddress.getText().length() == 0 || TCard_ID.getText().length() == 0 || TMoney.getText().length() == 0){
            JOptionPane.showMessageDialog(null, "No field can not be empty", "Message", JOptionPane.WARNING_MESSAGE);
        }
            else {try {
            Connection connection = ConnectionClass.connection();
            String query = "INSERT INTO Customer VALUE (?,?,?,?,?,?,?)";
            PreparedStatement preparedStatement = connection.prepareStatement(query);
            preparedStatement.setString(1, TID.getText());
            preparedStatement.setString(2, TName.getText());
            if (RFemale.isSelected()){
                preparedStatement.setString(3, "Female");
            } else if (RMale.isSelected()){
                preparedStatement.setString(3,"Male");
            }
            preparedStatement.setString(4,TPhone.getText());
            preparedStatement.setString(5, TAddress.getText());
            preparedStatement.setString(6, TCard_ID.getText());
            preparedStatement.setString(7, TMoney.getText());
            if (showTime){
                    show_customer();
                    showTime=false;
                }else {
                    model.setRowCount(0);
                    show_customer();
                }
            JOptionPane.showMessageDialog(null, "Insert Compeletely");
            connection.close();
        } catch (SQLException e){
            JOptionPane.showMessageDialog(null, e);
        }}
        } else if (combobox == "Update") {
            if (TID.getText().length()==0 || TName.getText().length()==0 || TPhone.getText().length()==0 || TAddress.getText().length() == 0 || TCard_ID.getText().length() == 0 || TMoney.getText().length() == 0){
            JOptionPane.showMessageDialog(null, "No field can not be empty", "Message", JOptionPane.WARNING_MESSAGE);
        }
            else {try {
                Connection connection = ConnectionClass.connection();
                String query = "UPDATE Customer SET Customer_name=?, Customer_gender=?, Customer_phone=?, Customer_address=?, Card_ID=?, Customer_money=? WHERE Customer_ID=?";
                PreparedStatement preparedStatement = connection.prepareStatement(query);
                preparedStatement.setString(1, TName.getText());
                if (RFemale.isSelected()){
                    preparedStatement.setString(2, "Female");
                }
                if (RMale.isSelected()){
                    preparedStatement.setString(2, "Male");
                }
                preparedStatement.setString(3,TPhone.getText());
                preparedStatement.setString(4,TAddress.getText());
                preparedStatement.setString(5, TCard_ID.getText());
                preparedStatement.setString(6,TMoney.getText());
                preparedStatement.setString(7, TID.getText());
                if (showTime){
                    show_customer();
                    showTime=false;
                }else {
                    model.setRowCount(0);
                    show_customer();
                }
                JOptionPane.showMessageDialog(null, "Update Compeletely");
                connection.close();
            } catch (SQLException e){
                JOptionPane.showMessageDialog(null, e);
            }}
        } else if (combobox == "Delete") {
            if (TID.getText().toString().length()==0){
                JOptionPane.showMessageDialog(null, "Field ID can not be empty", "Message", JOptionPane.WARNING_MESSAGE);
            }
            else {try {
                Connection connection = ConnectionClass.connection();
                String query = "DELETE FROM Customer WHERE Customer_ID = ?";
                PreparedStatement preparedStatement = connection.prepareStatement(query);
                preparedStatement.setString(1, TID.getText());
                connection.close();
            } catch (SQLException e){
                JOptionPane.showMessageDialog(null, e);
            }
        }}}
    }//GEN-LAST:event_BRunActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Manipulate_Customer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Manipulate_Customer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Manipulate_Customer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Manipulate_Customer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Manipulate_Customer().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    protected javax.swing.JButton BCustomer;
    private javax.swing.JButton BMenu;
    protected javax.swing.JButton BRun;
    private javax.swing.JRadioButton RFemale;
    private javax.swing.JRadioButton RMale;
    private javax.swing.JTextField TAddress;
    private javax.swing.JTextField TCard_ID;
    private javax.swing.JTextField TID;
    private javax.swing.JTextField TMoney;
    private javax.swing.JTextField TName;
    private javax.swing.JTextField TPhone;
    private javax.swing.JTable TableShowCustomer;
    private javax.swing.ButtonGroup buttonGroup1;
    protected javax.swing.JComboBox<String> comboboxdo;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    protected javax.swing.JLabel jLabel8;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}
